# -*- sh -*-

# C++ compiler and flags
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@

#---------------------------------------------------------------------------
# Installation information.
#---------------------------------------------------------------------------
bindir = @bindir@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
exec_prefix = @exec_prefix@
htmldir = @htmldir@
includedir = @includedir@
mandir = @mandir@/man1
prefix = @prefix@
srcdir = @srcdir@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@

# LSF_ENVDIR = @LSF_ENVDIR@
LSF_INCLUDEDIR = @LSF_INCLUDEDIR@
LSF_LIBDIR = @LSF_LIBDIR@

INCLUDE += -I.

ifdef LSF_INCLUDEDIR

INCLUDE += -I$(LSF_INCLUDEDIR)

endif
LD_LSF = -L$(LSF_LIBDIR) -lbat -llsf

CXXFLAGS += -Wall -Wunused

#---------------------------------------------------------------------------
# DESTDIR is designed to facilitate making packages. Normally it is empty
#---------------------------------------------------------------------------
#DESTDIR =
DEST_BINDIR = $(DESTDIR)$(bindir)
DEST_DOCDIR = $(DESTDIR)$(docdir)
DEST_MANDIR = $(DESTDIR)$(mandir)

#---------------------------------------------------------------------------
# Misc commands (safe to leave these untouched)
#---------------------------------------------------------------------------
RANLIB          = @RANLIB@
INSTALL         = @INSTALL@
INSTALL_DATA    = @INSTALL_DATA@
RM              = rm -f
RM_R            = rm -rf
AR_CR           = ar cr
RMDIR           = rmdir
LN              = /bin/ln -sf
CP              = cp
MKDIR           = mkdir

# -----------------------------------------------------------------------------
# There should be no need to modify anything below here.
# -----------------------------------------------------------------------------

LIBNAME = lsfutils
LIB = lib$(LIBNAME).a
BINS = lsf-direct lsf-server sample-server

####### Files

LIBHDRS = \
    lsfutil/LsfCore.hpp \
    lsfutil/LsfHostEntry.hpp \
    lsfutil/LsfHostList.hpp \
    lsfutil/LsfJobEntry.hpp \
    lsfutil/LsfJobList.hpp \
    lsfutil/LsfJobSubEntry.hpp \
    lsfutil/OutputQhost.hpp \
    lsfutil/OutputQstat.hpp \
    lsfutil/OutputQstatJ.hpp \
    lsfutil/XmlUtils.hpp

LIBSRCS = \
    lsfutil/LsfCore.cpp \
    lsfutil/LsfHostEntry.cpp \
    lsfutil/LsfHostList.cpp \
    lsfutil/LsfJobEntry.cpp \
    lsfutil/LsfJobList.cpp \
    lsfutil/LsfJobSubEntry.cpp \
    lsfutil/OutputQhost.cpp \
    lsfutil/OutputQstat.cpp \
    lsfutil/OutputQstatJ.cpp \
    lsfutil/XmlUtils.cpp


LIBOBJS = \
    lsfutil/LsfCore.o \
    lsfutil/LsfHostEntry.o \
    lsfutil/LsfHostList.o \
    lsfutil/LsfJobEntry.o \
    lsfutil/LsfJobList.o \
    lsfutil/LsfJobSubEntry.o \
    lsfutil/OutputQhost.o \
    lsfutil/OutputQstat.o \
    lsfutil/OutputQstatJ.o \
    lsfutil/XmlUtils.o

LIB2SRCS = \
    markutil/HttpCore.cpp \
    markutil/HttpHeader.cpp \
    markutil/HttpQuery.cpp \
    markutil/HttpRequest.cpp \
    markutil/HttpServer.cpp \
    markutil/SocketInfo.cpp \
    markutil/SocketServer.cpp

LIB2OBJS = \
    markutil/HttpCore.o \
    markutil/HttpHeader.o \
    markutil/HttpQuery.o \
    markutil/HttpRequest.o \
    markutil/HttpServer.o \
    markutil/SocketInfo.o \
    markutil/SocketServer.o

LDFLAGS += -g -lm -lnsl -ldl

first: all
####### Implicit rules

%.o : %.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $(INCLUDE) $< -o $@

%.o : %.cpp
	$(CXX) -c $(CXXFLAGS) $(INCLUDE) $< -o $@

%.o : %.cc
	$(CXX) -c $(CXXFLAGS) $(INCLUDE) $< -o $@

%.o : %.cxx
	$(CXX) -c $(CXXFLAGS) $(INCLUDE) $< -o $@

%.o : %.C
	$(CXX) -c $(CXXFLAGS) $(INCLUDE) $< -o $@

.c.o:
	$(CC) -c $(CFLAGS) $(INCLUDE) $< -o $@

####### Build rules


all: lib bin

lib: $(LIB)
bin: $(BINS) $(LIB)

$(LIB): $(LIBOBJS)
	$(AR_CR) $@ $?

libmarkutil.a: $(LIB2OBJS)
	$(AR_CR) $@ $?

# -----------------------------------------------------------------------------
####### Compile

lsf-direct: lsf-direct.o $(LIBHDRS) $(LIB) libmarkutil.a
	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ $< \
    $(LDFLAGS) -L$(srcdir) -l$(LIBNAME) -lmarkutil $(LD_LSF)

lsf-server: lsf-server.o $(LIBHDRS) $(LIB) libmarkutil.a
	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ $< \
    $(LDFLAGS) -L$(srcdir) -l$(LIBNAME) -lmarkutil $(LD_LSF)

sample-server: sample-server.cpp libmarkutil.a
	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ $< \
    $(LDFLAGS) -L$(srcdir)  -lmarkutil

normalizePath: tests/normalizePath.cpp libmarkutil.a
	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ $< \
    $(LDFLAGS) -L$(srcdir)  -lmarkutil


# -----------------------------------------------------------------------------
# clean targets

clean:
	/bin/rm -f *~ \#* $(BINS) $(LIB) *.o markutil/*.o lsfutil/*.o

distclean: clean
	/bin/rm -rf Makefile sysconf.h config.h $(srcdir)/*.bak

# -----------------------------------------------------------------------------
# installation


.PHONY: all bin lib clean distclean

# -----------------------------------------------------------------------------
